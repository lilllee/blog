id|Title|Content|ImagePath|InsertedAt|Tags
1|duckDB테스트중|"# Elixir에서 GenServer 제대로 이해하기

Elixir에서 `GenServer`는 상태를 유지하며 병렬 처리를 수행할 수 있는 중요한 기능입니다. 이번 글에서는 `GenServer`의 기본 개념과 사용법을 살펴보겠습니다.

## 1. GenServer란?

`GenServer`는 OTP(Elixir의 Open Telecom Platform)에서 제공하는 프로세스 관리 모듈로, 상태를 유지하고 특정 요청을 처리하는 역할을 합니다.

## 2. 기본적인 GenServer 사용법

```elixir
defmodule MyServer do
  use GenServer

  # 서버 시작
  def start_link(initial_value) do
    GenServer.start_link(__MODULE__, initial_value, name: __MODULE__)
  end

  # 초기 상태 설정
  def init(initial_value) do
    {:ok, initial_value}
  end

  # 상태 조회
  def handle_call(:get, _from, state) do
    {:reply, state, state}
  end
end"|ssl.jpg|2025.01.21
2|테스트 제목|"An h1 header
============

Paragraphs are separated by a blank line.

2nd paragraph. *Italic*, **bold**, and `monospace`. Itemized lists
look like:

  * this one
  * that one
  * the other one

Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.

> Block quotes are
> written like so.
>
> They can span multiple paragraphs,
> if you like.

Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., ""it's all
in chapters 12--14""). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺



An h2 header
------------

Here's a numbered list:

 1. first item
 2. second item
 3. third item

Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here's a code sample:

    # Let me re-iterate ...
    for i in 1 .. 10 { do-something(i) }

As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:

~~~
define foobar() {
    print ""Welcome to flavor country!"";
}
~~~

(which makes copying & pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:

~~~python
import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
~~~



### An h3 header ###

Now a nested list:

 1. First, get these ingredients:

      * carrots
      * celery
      * lentils

 2. Boil some water.

 3. Dump everything in the pot and follow
    this algorithm:

        find wooden spoon
        uncover pot
        stir
        cover pot
        balance wooden spoon precariously on pot handle
        wait 10 minutes
        goto first step (or shut off burner when done)

    Do not bump wooden spoon or it will fall.

Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).

Here's a link to [a website](http://foo.bar), to a [local
doc](local-doc.html), and to a [section heading in the current
doc](#an-h2-header). Here's a footnote [^1].

[^1]: Footnote text goes here.

Tables can look like this:

size  material      color
----  ------------  ------------
9     leather       brown
10    hemp canvas   natural
11    glass         transparent

Table: Shoes, their sizes, and what they're made of

(The above is the caption for the table.) Pandoc also supports
multi-line tables:

--------  -----------------------
keyword   text
--------  -----------------------
red       Sunsets, apples, and
          other red or reddish
          things.

green     Leaves, grass, frogs
          and other things it's
          not easy being.
--------  -----------------------

A horizontal rule follows.

***

Here's a definition list:

apples
  : Good for making applesauce.
oranges
  : Citrus!
tomatoes
  : There's no ""e"" in tomatoe.

Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)

Here's a ""line block"":

| Line one
|   Line too
| Line tree

and images can be specified like so:

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$

And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: \`foo\`, \*bar\*, etc."|dark.jpg|2025.01.21|test1,test2
3|테스트3|"defmodule LiveCommentsWeb.CommentLive do
  use Phoenix.LiveView

  def render(assigns) do
    ~H""""""
    <div>
      <h2>댓글</h2>
      <ul>
        <%= for comment <- @comments do %>
          <li><%= comment %></li>
        <% end %>
      </ul>
      <form phx-submit=""add_comment"">
        <input type=""text"" name=""comment"" />
        <button type=""submit"">추가</button>
      </form>
    </div>
    """"""
  end

  def handle_event(""add_comment"", %{""comment"" => comment}, socket) do
    {:noreply, assign(socket, comments: socket.assigns.comments ++ [comment])}
  end
end

---

## 3. PostgreSQL 인덱스 튜닝 방법

```markdown
# PostgreSQL 인덱스 튜닝 방법

PostgreSQL을 사용하다 보면 성능 최적화를 위해 인덱스 튜닝이 필요합니다. 이번 글에서는 기본적인 인덱스 최적화 기법을 정리해 보겠습니다.

## 1. 인덱스란?

데이터베이스 인덱스는 특정 컬럼의 검색 속도를 향상시키기 위한 자료구조입니다.

## 2. 인덱스 생성하기

```sql
CREATE INDEX idx_users_email ON users (email);"|ecto.jpg|2025.01.23|test1,test3,test4
4|test111111|"3. GenServer를 활용한 실전 예제
GenServer를 활용하면 실시간 데이터 처리를 효율적으로 할 수 있습니다. 다음 글에서 더 깊이 다뤄보겠습니다!

---

## 2. Phoenix LiveView로 실시간 댓글 시스템 만들기

```markdown
# Phoenix LiveView로 실시간 댓글 시스템 만들기

Phoenix LiveView를 사용하면 별도의 JavaScript 없이도 실시간 웹 애플리케이션을 쉽게 구축할 수 있습니다.

## 1. 프로젝트 설정

```bash
mix phx.new live_comments --live
cd live_comments
mix setup
2. LiveView 설정
LiveView를 사용하여 댓글을 실시간으로 업데이트하는 방법을 알아봅니다.

elixir
defmodule LiveCommentsWeb.CommentLive do
  use Phoenix.LiveView

  def render(assigns) do
    ~H""""""
    <div>
      <h2>댓글</h2>
      <ul>
        <%= for comment <- @comments do %>
          <li><%= comment %></li>
        <% end %>
      </ul>
      <form phx-submit=""add_comment"">
        <input type=""text"" name=""comment"" />
        <button type=""submit"">추가</button>
      </form>
    </div>
    """"""
  end

  def handle_event(""add_comment"", %{""comment"" => comment}, socket) do
    {:noreply, assign(socket, comments: socket.assigns.comments ++ [comment])}
  end
end
LiveView를 활용하여 보다 강력한 기능을 추가하는 방법도 함께 살펴보겠습니다.


---

## 3. PostgreSQL 인덱스 튜닝 방법

```markdown
# PostgreSQL 인덱스 튜닝 방법

PostgreSQL을 사용하다 보면 성능 최적화를 위해 인덱스 튜닝이 필요합니다. 이번 글에서는 기본적인 인덱스 최적화 기법을 정리해 보겠습니다.

## 1. 인덱스란?

데이터베이스 인덱스는 특정 컬럼의 검색 속도를 향상시키기 위한 자료구조입니다.

## 2. 인덱스 생성하기

```sql
CREATE INDEX idx_users_email ON users (email);"|dark.jpg|2025.12.12|test1,test3,test4
5|테스트|테스트컨텐츠|dark.jpg|2025.02.10|test1,2,3,4